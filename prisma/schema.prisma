// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String    @id @default(cuid())
  username              String    @unique
  name                  String
  email                 String    @unique
  password              String
  role                  UserRole
  photoUrl              String?
  dailySalary           Float?
  allowRemoteCheckIn    Boolean?  @default(false)
  loanLimit             Float?
  interestRate          Float?
  leaseStartDate        DateTime?
  leaseEndDate          DateTime?
  numberOfInhabitants   Int?
  inhabitantNames       String[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  condominios           Condominio[] @relation("CondominioAdmins")
  domicilios            Address[]    @relation("UserAddresses")
  vehicles              Vehicle[]    @relation("UserVehicles")
  createdPeticiones     Peticion[]   @relation("CreatedPeticiones")
  createdBitacora       BitacoraEntry[]
  createdGuestPasses    GuestPass[]
  packagesForUser       Package[]    @relation("PackagesForUser")
  createdReservations   Reservation[]
  createdAlertResponses AlertResponse[]
  createdLoans          Loan[]
  assignedShifts        PlannedShift[]
  shiftRecords          ShiftRecord[]
  assignedWorkOrders    WorkOrder[]  @relation("AssignedWorkOrders")

  @@map("users")
}

model Condominio {
  id                     String    @id @default(cuid())
  name                   String
  mainAddress            String
  latitude               Float?
  longitude              Float?
  status                 String    @default("Activo") // Activo, Suspendido
  geofenceRadius         Int?      @default(200)
  guardsRequiredDiurno   Int?      @default(1)
  guardsRequiredNocturno Int?      @default(1)
  guardMenuSections      String[]

  // Relations
  admins                 User[]        @relation("CondominioAdmins")
  addresses              Address[]
  peticiones             Peticion[]
  bitacoraEntries        BitacoraEntry[]
  vehicularRegistrations VehicularRegistration[]
  pedestrianRegistrations PedestrianRegistration[]
  packages               Package[]
  guestPasses            GuestPass[]
  emergencyContacts      EmergencyContact[]
  assets                 Asset[]
  reservations           Reservation[]
  workOrders             WorkOrder[]
  surveys                Survey[]
  plannedShifts          PlannedShift[]
  shiftRecords           ShiftRecord[]

  @@map("condominios")
}

model Address {
  id           String @id @default(cuid())
  fullAddress  String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id], onDelete: Cascade)

  // Relations
  users        User[] @relation("UserAddresses")

  @@unique([fullAddress, condominioId])
  @@map("addresses")
}

model Vehicle {
  id           String  @id @default(cuid())
  userId       String
  alias        String?
  licensePlate String
  brand        String
  color        String
  type         String
  user         User    @relation("UserVehicles", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_vehicles")
}

model Peticion {
  id              String           @id @default(cuid())
  title           String
  description     String
  creatorId       String
  creatorName     String
  creatorRole     UserRole
  condominioId    String
  condominioName  String
  status          String           @default("Abierta") // Abierta, En Progreso, Cerrada
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creator         User             @relation("CreatedPeticiones", fields: [creatorId], references: [id])
  condominio      Condominio       @relation(fields: [condominioId], references: [id])
  comments        PeticionComment[]
  workOrder       WorkOrder?

  @@map("peticiones")
}

model PeticionComment {
  id         String   @id @default(cuid())
  peticionId String
  authorId   String
  authorName String
  text       String
  createdAt  DateTime @default(now())
  peticion   Peticion @relation(fields: [peticionId], references: [id], onDelete: Cascade)

  @@map("peticion_comments")
}

model BitacoraEntry {
  id          String   @id @default(cuid())
  condominioId String
  authorId    String
  authorName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String // Manual, Registro Vehicular, etc.
  text        String
  relatedId   String?
  photos      String[]
  category    String?
  latitude    Float?
  longitude   Float?
  author      User     @relation(fields: [authorId], references: [id])
  condominio  Condominio @relation(fields: [condominioId], references: [id])

  @@map("bitacora_entries")
}

model VehicularRegistration {
  id                String  @id @default(cuid())
  licensePlate      String
  fullName          String
  visitorType       String
  providerType      String?
  employeeType      String?
  vehicleType       String
  vehicleBrand      String
  vehicleColor      String
  address           String
  entryTimestamp    DateTime @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
  condominio        Condominio @relation(fields: [condominioId], references: [id])

  @@map("vehicular_registrations")
}

model PedestrianRegistration {
  id                String   @id @default(cuid())
  fullName          String
  visitorType       String
  address           String
  entryTimestamp    DateTime @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
  condominio        Condominio @relation(fields: [condominioId], references: [id])

  @@map("pedestrian_registrations")
}

model GuestPass {
  id                String   @id @default(cuid())
  accessType        String // vehicular, pedestrian
  guestName         String
  visitorType       String
  passType          String // temporal, permanent
  validUntil        DateTime?
  licensePlate      String?
  vehicleType       String?
  vehicleBrand      String?
  vehicleColor      String?
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
  residentId        String
  residentName      String
  addressId         String
  address           String
  condominioId      String
  latitude          Float?
  longitude         Float?
  createdAt         DateTime @default(now())
  resident          User     @relation(fields: [residentId], references: [id])
  condominio        Condominio @relation(fields: [condominioId], references: [id])

  @@map("guest_passes")
}

model Package {
  id                     String   @id @default(cuid())
  recipientId            String
  recipientAddressId     String
  recipientAddress       String
  recipientName          String
  trackingNumber         String?
  courierName            String
  courierCompany         String
  status                 String   @default("En Recepción") // En Recepción, Entregado, Con Daño
  receivedAt             DateTime @default(now())
  deliveredAt            DateTime?
  receivedByGuardId      String
  receivedByGuardName    String
  deliveredToName        String?
  condominioId           String
  damageNotes            String?
  deliveryPhotoUrl       String?
  deliverySignatureUrl   String?
  recipient              User     @relation("PackagesForUser", fields: [recipientId], references: [id])
  condominio             Condominio @relation(fields: [condominioId], references: [id])

  @@map("packages")
}

model EmergencyContact {
  id          String  @id @default(cuid())
  name        String
  phone       String
  description String?
  condominioId String
  condominio  Condominio @relation(fields: [condominioId], references: [id])

  @@map("emergency_contacts")
}

model Asset {
  id                  String   @id @default(cuid())
  name                String
  category            String
  location            String
  condominioId        String
  purchaseDate        DateTime?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  status              String   @default("Operativo") // Operativo, En Mantenimiento, Requiere Reemplazo
  condominio          Condominio @relation(fields: [condominioId], references: [id])

  @@map("assets")
}

model Reservation {
  id           String   @id @default(cuid())
  areaId       String
  areaName     String
  userId       String
  userName     String
  date         String // YYYY-MM-DD
  startTime    String
  endTime      String
  status       String   @default("Pendiente") // Pendiente, Aprobada, Rechazada
  condominioId String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  condominio   Condominio @relation(fields: [condominioId], references: [id])

  @@map("reservations")
}

model WorkOrder {
  id           String   @id @default(cuid())
  title        String
  description  String
  peticionId   String?  @unique
  condominioId String
  address      String
  status       String   @default("Pendiente") // Pendiente, Asignada, En Progreso, Completada, Cancelada
  assignedToId String?
  createdAt    DateTime @default(now())
  completedAt  DateTime?
  cost         Float?
  assignedTo   User?    @relation("AssignedWorkOrders", fields: [assignedToId], references: [id])
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  peticion     Peticion?  @relation(fields: [peticionId], references: [id])

  @@map("work_orders")
}

model Survey {
  id           String         @id @default(cuid())
  title        String
  description  String
  condominioId String
  options      Json
  createdAt    DateTime       @default(now())
  closesAt     DateTime
  status       String         @default("Abierta") // Abierta, Cerrada
  condominio   Condominio     @relation(fields: [condominioId], references: [id])

  @@map("surveys")
}

model CommunityEvent {
  id           String   @id @default(cuid())
  title        String
  description  String
  condominioId String
  start        DateTime
  end          DateTime
  isAllDay     Boolean
  location     String?

  @@map("community_events")
}

model AlertResponse {
  id                  String   @id @default(cuid())
  guardId             String
  guardName           String
  condominioId        String
  createdAt           DateTime @default(now())
  responseTimeSeconds Int
  selfiePhotoUrl      String
  environmentPhotoUrl String
  comment             String
  guard               User     @relation(fields: [guardId], references: [id])

  @@map("alert_responses")
}

model ShiftRecord {
  id             String    @id @default(cuid())
  guardId        String
  guardName      String
  condominioId   String
  condominioName String
  turno          String // Diurno, Nocturno, Apoyo
  startTime      DateTime
  endTime        DateTime?
  equipmentIds   String[]
  handoverNotes  String?
  incident       String?
  guard          User      @relation(fields: [guardId], references: [id])
  condominio     Condominio @relation(fields: [condominioId], references: [id])

  @@map("shift_records")
}

model PlannedShift {
  id           String   @id
  date         String // YYYY-MM-DD
  condominioId String
  turno        String // Diurno, Nocturno
  slot         Int
  guardId      String?
  guard        User?    @relation(fields: [guardId], references: [id])
  condominio   Condominio @relation(fields: [condominioId], references: [id])

  @@map("planned_shifts")
}

model ArchivedPayroll {
  id          String   @id @default(cuid())
  period      Json // { from: আইএসওস্ট্রিং, to: আইএসওস্ট্রিং }
  payrollData Json // Array<PayrollData>
  totals      Json
  archivedAt  DateTime @default(now())

  @@map("archived_payrolls")
}

model Loan {
  id           String   @id @default(cuid())
  guardId      String
  guardName    String
  amount       Float
  reason       String
  interestRate Float
  totalOwed    Float
  balance      Float
  status       String   @default("Pendiente") // Pendiente, Aprobado, Rechazado, Pagado
  requestedAt  DateTime @default(now())
  approvedAt   DateTime?
  payments     Json     @default("[]") // { payrollId: string, amount: number, date: string }[]
  guard        User     @relation(fields: [guardId], references: [id])

  @@map("loans")
}

model Transaction {
  id         String   @id @default(cuid())
  residentId String
  date       DateTime
  type       String // charge, payment
  concept    String
  amount     Float

  @@map("transactions")
}

model List {
  key    String   @id
  values String[]

  @@map("lists")
}

model DirectMessage {
  id             String       @id @default(cuid())
  conversationId String
  authorId       String
  authorName     String
  text           String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

model Conversation {
  id              String          @id
  participantIds  String[]
  participantNames String[]
  messages        DirectMessage[]
  lastMessageAt   DateTime        @updatedAt

  @@map("conversations")
}

enum UserRole {
  Administrador
  Propietario
  Renta
  Guardia
  Adm_Condo
}
