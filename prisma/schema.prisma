// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  name                String
  email               String    @unique
  password            String?
  role                UserRole
  photoUrl            String?
  dailySalary         Float?
  allowRemoteCheckIn  Boolean?
  loanLimit           Float?
  interestRate        Float?
  leaseStartDate      DateTime?
  leaseEndDate        DateTime?
  numberOfInhabitants Int?
  inhabitantNames     String? // Stored as comma-separated string

  // Relations
  condominios            Condominio[]          @relation("UserCondos")
  domicilios             Address[]
  vehicles               VehicleInfo[]
  createdPeticiones      Peticion[]            @relation("CreatedPeticiones")
  peticionComments       PeticionComment[]
  bitacoraEntries        BitacoraEntry[]
  shifts                 ShiftRecord[]
  packagesReceived       Package[]             @relation("ReceivedPackages")
  packagesDeliveredTo    Package[]             @relation("DeliveredToPackages")
  reservations           Reservation[]
  surveysVotedOn         Survey[]
  workOrdersAssigned     WorkOrder[]
  alertResponses         AlertResponse[]
  createdCommunityEvents CommunityEvent[]
  createdNotifications   VisitorNotification[]
  chatMessages           ChatMessage[]
  loans                  Loan[]
  conversations          Conversation[]        @relation("UserConversations")
  directMessagesSent     DirectMessage[]       @relation("SentMessages")
  directMessagesReceived DirectMessage[]       @relation("ReceivedMessages")
}

model Condominio {
  id                     String  @id @default(cuid())
  name                   String
  mainAddress            String
  latitude               Float?
  longitude              Float?
  status                 String
  geofenceRadius         Int?
  guardsRequiredDiurno   Int?
  guardsRequiredNocturno Int?
  guardMenuSections      String? // Stored as comma-separated string

  // Relations
  users                User[]                @relation("UserCondos")
  addresses            Address[]
  bitacoraEntries      BitacoraEntry[]
  packages             Package[]
  peticiones           Peticion[]
  emergencyContacts    EmergencyContact[]
  reservations         Reservation[]
  surveys              Survey[]
  workOrders           WorkOrder[]
  plannedShifts        PlannedShift[]
  guestPasses          GuestPass[]
  visitorNotifications VisitorNotification[]
  panicAlerts          PanicAlert[]
  assets               Asset[]
  shiftRecords         ShiftRecord[]
}

model Address {
  id           String     @id @default(cuid())
  fullAddress  String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  users        User[]
}

model VehicleInfo {
  id           String  @id @default(cuid())
  alias        String?
  licensePlate String
  brand        String
  color        String
  type         String
  userId       String
  user         User    @relation(fields: [userId], references: [id])
}

model VehicularRegistration {
  id                String    @id @default(cuid())
  licensePlate      String
  fullName          String
  visitorType       String
  providerType      String?
  employeeType      String?
  vehicleType       String
  vehicleBrand      String
  vehicleColor      String
  address           String
  entryTimestamp    DateTime  @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
}

model PedestrianRegistration {
  id                String    @id @default(cuid())
  fullName          String
  visitorType       String
  address           String
  entryTimestamp    DateTime  @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
}

model Package {
  id                   String        @id @default(cuid())
  recipientAddressId   String
  recipientAddress     String
  recipientName        String
  trackingNumber       String?
  courierName          String
  courierCompany       String
  status               PackageStatus
  receivedAt           DateTime      @default(now())
  deliveredAt          DateTime?
  receivedByGuardId    String
  receivedByGuardName  String
  deliveredToName      String?
  condominioId         String
  damageNotes          String?
  deliveryPhotoUrl     String?
  deliverySignatureUrl String?
  condominio           Condominio    @relation(fields: [condominioId], references: [id])
  recipient            User          @relation("ReceivedPackages", fields: [recipientName], references: [id])
  deliveredTo          User?         @relation("DeliveredToPackages", fields: [deliveredToName], references: [id])
}

model BitacoraEntry {
  id           String            @id @default(cuid())
  condominioId String
  authorId     String
  authorName   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt
  type         BitacoraEntryType
  text         String
  relatedId    String?
  photos       String? // Stored as comma-separated string
  category     String?
  latitude     Float?
  longitude    Float?
  condominio   Condominio        @relation(fields: [condominioId], references: [id])
  author       User              @relation(fields: [authorId], references: [id])
}

model Peticion {
  id             String            @id @default(cuid())
  title          String
  description    String
  creatorId      String
  creatorName    String
  creatorRole    UserRole
  condominioId   String
  status         PeticionStatus
  category       PeticionCategory?
  createdAt      DateTime          @default(now())
  comments       PeticionComment[]
  condominioName String
  creator        User              @relation("CreatedPeticiones", fields: [creatorId], references: [id])
  workOrders     WorkOrder[]
  condominio     Condominio        @relation(fields: [condominioId], references: [id])
}

model PeticionComment {
  id         String    @id @default(cuid())
  authorId   String
  authorName String
  text       String
  createdAt  DateTime  @default(now())
  peticionId String?
  peticion   Peticion? @relation(fields: [peticionId], references: [id])
  author     User      @relation(fields: [authorId], references: [id])
}

model ShiftRecord {
  id             String             @id @default(cuid())
  guardId        String
  guardName      String
  condominioId   String
  condominioName String
  turno          String
  startTime      DateTime
  endTime        DateTime?
  equipmentIds   String? // Stored as comma-separated string
  handoverNotes  String?
  incident       ShiftIncidentType?
  guard          User               @relation(fields: [guardId], references: [id])
  condominio     Condominio         @relation(fields: [condominioId], references: [id])
}

model PlannedShift {
  id           String     @id @default(cuid())
  date         String // YYYY-MM-DD
  condominioId String
  turno        String // Diurno or Nocturno
  slot         Int
  guardId      String?
  condominio   Condominio @relation(fields: [condominioId], references: [id])
}

model Loan {
  id           String     @id @default(cuid())
  guardId      String
  guardName    String
  amount       Float
  reason       String
  interestRate Float
  totalOwed    Float
  balance      Float
  status       LoanStatus
  requestedAt  DateTime   @default(now())
  approvedAt   DateTime?
  payments     String // Stored as JSON string
  guard        User       @relation(fields: [guardId], references: [id])
}

model Comunicado {
  id         String   @id @default(cuid())
  subject    String
  message    String
  target     String // 'all' or a condominioId
  targetName String
  channels   String // Stored as comma-separated string
  createdAt  DateTime @default(now())
}

model WorkOrder {
  id           String          @id @default(cuid())
  title        String
  description  String
  peticionId   String?
  condominioId String
  address      String
  status       WorkOrderStatus
  assignedTo   String?
  createdAt    DateTime        @default(now())
  completedAt  DateTime?
  cost         Float?
  condominio   Condominio      @relation(fields: [condominioId], references: [id])
  peticion     Peticion?       @relation(fields: [peticionId], references: [id])
  assignee     User?           @relation(fields: [assignedTo], references: [id])
}

model Asset {
  id                  String     @id @default(cuid())
  name                String
  category            String
  location            String
  condominioId        String
  purchaseDate        DateTime?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  status              String
  condominio          Condominio @relation(fields: [condominioId], references: [id])
}

model Survey {
  id           String     @id @default(cuid())
  title        String
  description  String
  condominioId String
  options      String // Stored as JSON string
  createdAt    DateTime   @default(now())
  closesAt     DateTime
  status       String
  condominio   Condominio @relation(fields: [condominioId], references: [id], onDelete: Cascade)
  voters       User[]
}

model CommunityEvent {
  id           String     @id @default(cuid())
  title        String
  description  String
  condominioId String
  start        DateTime
  end          DateTime
  isAllDay     Boolean
  location     String?
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  creator      User       @relation(fields: [creatorId], references: [id])
  creatorId    String
}

model ChatMessage {
  id         String   @id @default(cuid())
  authorId   String
  authorName String
  text       String
  createdAt  DateTime @default(now())
  // Relation
  author     User     @relation(fields: [authorId], references: [id])
}

model HandoverNote {
  id           String   @id @default(cuid())
  condominioId String
  authorId     String
  authorName   String
  notes        String
  createdAt    DateTime @default(now())
}

model DirectMessage {
  id             String       @id @default(cuid())
  conversationId String
  authorId       String
  authorName     String
  text           String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  author         User         @relation("SentMessages", fields: [authorId], references: [id])
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId    String
}

model Conversation {
  id            String          @id @default(cuid())
  messages      DirectMessage[]
  lastMessageAt DateTime        @updatedAt
  participants  User[]          @relation("UserConversations")
}

model ArchivedPayroll {
  id          String   @id @default(cuid())
  periodFrom  DateTime
  periodTo    DateTime
  payrollData String // Stored as JSON string
  totals      String // Stored as JSON string
  archivedAt  DateTime @default(now())
}

model List {
  key    String   @id
  values String[]
}

model AlertResponse {
  id                  String     @id @default(cuid())
  guardId             String
  guardName           String
  condominioId        String
  createdAt           DateTime   @default(now())
  responseTimeSeconds Int
  selfiePhotoUrl      String
  environmentPhotoUrl String
  comment             String
  guard               User       @relation(fields: [guardId], references: [id])
  condominio          Condominio @relation(fields: [condominioId], references: [id])
}

model GuestPass {
  id                String     @id @default(cuid())
  accessType        String
  guestName         String
  visitorType       String
  passType          String
  validUntil        DateTime?
  licensePlate      String?
  vehicleType       String?
  vehicleBrand      String?
  vehicleColor      String?
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
  residentId        String
  residentName      String
  addressId         String
  address           String
  condominioId      String
  latitude          Float?
  longitude         Float?
  createdAt         DateTime   @default(now())
  condominio        Condominio @relation(fields: [condominioId], references: [id])
}

model VisitorNotification {
  id           String                    @id @default(cuid())
  who          String
  visitorType  String
  subject      String
  residentId   String
  residentName String
  addressId    String
  address      String
  condominioId String
  createdAt    DateTime                  @default(now())
  status       VisitorNotificationStatus
  resident     User                      @relation(fields: [residentId], references: [id])
  condominio   Condominio                @relation(fields: [condominioId], references: [id])
}

model Reservation {
  id           String            @id @default(cuid())
  areaId       String
  areaName     String
  userId       String
  userName     String
  date         String
  startTime    String
  endTime      String
  status       ReservationStatus
  condominioId String
  createdAt    DateTime          @default(now())
  user         User              @relation(fields: [userId], references: [id])
  condominio   Condominio        @relation(fields: [condominioId], references: [id])
  area         CommonArea        @relation(fields: [areaId], references: [id])
}

model CommonArea {
  id           String        @id @default(cuid())
  name         String
  description  String
  capacity     Int
  condominioId String
  imageUrl     String?
  rules        String?
  cost         Float?
  openingTime  String?
  closingTime  String?
  reservations Reservation[]
  condominio   Condominio    @relation(fields: [condominioId], references: [id])
}

model Transaction {
  id         String   @id @default(cuid())
  residentId String
  date       DateTime
  type       String // charge or payment
  concept    String
  amount     Float
}

model PanicAlert {
  id           String     @id @default(cuid())
  condominioId String
  guardId      String
  guardName    String
  createdAt    DateTime   @default(now())
  condominio   Condominio @relation(fields: [condominioId], references: [id])
}

enum UserRole {
  Administrador
  Propietario
  Renta
  Guardia
  Adm_Condo
}

enum PeticionStatus {
  Abierta
  En_Progreso
  Cerrada
}

enum BitacoraEntryType {
  Manual
  Registro_Vehicular
  Registro_Peatonal
  Peticion_Creada
  Alerta_Respondida
  Incidente_Reportado
}

enum PackageStatus {
  En_Recepcion
  Entregado
  Con_Daño
}

enum ReservationStatus {
  Pendiente
  Aprobada
  Rechazada
}

enum VisitorNotificationStatus {
  Activa
  Utilizada
  Cancelada
}

enum ShiftIncidentType {
  Falta
  Permiso_con_Goce
  Permiso_sin_Goce
  Enfermedad_General
  Incapacidad
  Vacaciones
  Adelanto_de_Turno
  Doble_Turno
  Penalizacion
}

enum LoanStatus {
  Pendiente
  Aprobado
  Rechazado
  Pagado
}

enum WorkOrderStatus {
  Pendiente
  Asignada
  En_Progreso
  Completada
  Cancelada
}

enum PeticionCategory {
  General
  Financiera
  Emergencia
}

// Relation table for User and Condominio (many-to-many)
model _UserCondos {
A String
B String

@@unique([A, B])
@@index([B])
}
