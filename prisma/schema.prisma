// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  username              String          @unique
  name                  String
  email                 String          @unique
  password              String?
  role                  UserRole
  photoUrl              String?
  condominioId          String?
  addressId             String?
  condominioIds         String?
  addressIds            String?
  vehicles              VehicleInfo[]
  dailySalary           Float?
  allowRemoteCheckIn    Boolean?
  loanLimit             Float?
  interestRate          Float?
  leaseStartDate        DateTime?
  leaseEndDate          DateTime?
  numberOfInhabitants   Int?
  inhabitantNames       String?
  createdPeticiones     Peticion[]      @relation("CreatedPeticiones")
  peticionComments      PeticionComment[]
  bitacoraEntries       BitacoraEntry[]
  shifts                ShiftRecord[]
  packagesReceived      Package[]       @relation("ReceivedPackages")
  packagesDeliveredTo   Package[]       @relation("DeliveredToPackages")
  reservations          Reservation[]
  surveysVotedOn        Survey[]
  workOrdersAssigned    WorkOrder[]
  domicilios            Address[]
  condominios           Condominio[]
  conversations         Conversation[]
  alertResponses        AlertResponse[]
  createdCommunityEvents CommunityEvent[]
  createdNotifications  VisitorNotification[]
  chatMessages          ChatMessage[]
  loans                 Loan[]
  directMessagesSent    DirectMessage[] @relation("SentMessages")
  directMessagesReceived DirectMessage[] @relation("ReceivedMessages")
}

enum UserRole {
  Administrador
  Propietario
  Renta
  Guardia
  Adm_Condo
}

model Condominio {
  id                     String         @id @default(cuid())
  name                   String         @unique
  mainAddress            String
  latitude               Float?
  longitude              Float?
  status                 String
  guardIds               String?
  geofenceRadius         Int?
  guardsRequiredDiurno   Int?
  guardsRequiredNocturno Int?
  guardMenuSections      String?
  addresses              Address[]
  users                  User[]
  BitacoraEntry          BitacoraEntry[]
  Peticion               Peticion[]
  ShiftRecord            ShiftRecord[]
  PlannedShift           PlannedShift[]
  Package                Package[]
  CommonArea             CommonArea[]
  Reservation            Reservation[]
  EmergencyContact       EmergencyContact[]
  WorkOrder              WorkOrder[]
  Survey                 Survey[]
  CommunityEvent         CommunityEvent[]
  VisitorNotification    VisitorNotification[]
  PanicAlert             PanicAlert[]
}

model Address {
  id            String       @id @default(cuid())
  fullAddress   String
  condominioId  String
  condominio    Condominio   @relation(fields: [condominioId], references: [id])
  users         User[]
  packages      Package[]
  reservations  Reservation[]
  guestPasses   GuestPass[]
  notifications VisitorNotification[]
}

model VehicleInfo {
  id           String @id @default(cuid())
  alias        String?
  licensePlate String
  brand        String
  color        String
  type         String
  userId       String
  user         User   @relation(fields: [userId], references: [id])
}

model VehicularRegistration {
  id                String  @id @default(cuid())
  licensePlate      String
  fullName          String
  visitorType       String
  providerType      String?
  employeeType      String?
  vehicleType       String
  vehicleBrand      String
  vehicleColor      String
  address           String
  entryTimestamp    DateTime @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
}

model PedestrianRegistration {
  id                String  @id @default(cuid())
  fullName          String
  visitorType       String
  address           String
  entryTimestamp    DateTime @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
}

model BitacoraEntry {
  id           String    @id @default(cuid())
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  authorName   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  type         String
  text         String
  relatedId    String?
  photos       String?
  category     String?
  latitude     Float?
  longitude    Float?
}

model Peticion {
  id             String            @id @default(cuid())
  title          String
  description    String
  creatorId      String
  creator        User              @relation("CreatedPeticiones", fields: [creatorId], references: [id])
  creatorName    String
  creatorRole    UserRole
  condominioId   String
  condominio     Condominio        @relation(fields: [condominioId], references: [id])
  condominioName String
  status         String
  category       String?
  createdAt      DateTime          @default(now())
  comments       PeticionComment[]
  WorkOrder      WorkOrder[]
}

model PeticionComment {
  id         String   @id @default(cuid())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  authorName String
  text       String
  createdAt  DateTime @default(now())
  peticionId String
  peticion   Peticion @relation(fields: [peticionId], references: [id])
}

model Package {
  id                   String    @id @default(cuid())
  recipientAddressId   String
  recipientAddress     String
  recipientName        String
  trackingNumber       String?
  courierName          String
  courierCompany       String
  status               String
  receivedAt           DateTime  @default(now())
  deliveredAt          DateTime?
  receivedByGuardId    String
  deliveredToName      String?
  condominioId         String
  condominio           Condominio @relation(fields: [condominioId], references: [id])
  damageNotes          String?
  deliveryPhotoUrl     String?
  deliverySignatureUrl String?
  recipient            User      @relation("ReceivedPackages", fields: [recipientName], references: [id])
  deliveredTo          User?     @relation("DeliveredToPackages", fields: [deliveredToName], references: [id])
}

model GuestPass {
  id                String   @id @default(cuid())
  accessType        String
  guestName         String
  visitorType       String
  passType          String
  validUntil        DateTime?
  licensePlate      String?
  vehicleType       String?
  vehicleBrand      String?
  vehicleColor      String?
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
  residentId        String
  residentName      String
  addressId         String
  address           Address @relation(fields: [addressId], references: [id])
  condominioId      String
  latitude          Float?
  longitude         Float?
  createdAt         DateTime @default(now())
}

model EmergencyContact {
  id           String     @id @default(cuid())
  name         String
  phone        String
  description  String?
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
}

enum ShiftIncidentType {
  Falta
  Permiso_con_Goce
  Permiso_sin_Goce
  Enfermedad_General
  Incapacidad
  Vacaciones
  Adelanto_de_Turno
  Doble_Turno
  Penalizacion
}

model ShiftRecord {
  id             String             @id @default(cuid())
  guardId        String
  guard          User               @relation(fields: [guardId], references: [id])
  guardName      String
  condominioId   String
  condominio     Condominio         @relation(fields: [condominioId], references: [id])
  condominioName String
  turno          String
  startTime      DateTime           @default(now())
  endTime        DateTime?
  equipmentIds   String?
  handoverNotes  String?
  incident       ShiftIncidentType?
}

model PlannedShift {
  id           String     @id @default(cuid())
  date         String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  turno        String
  slot         Int
  guardId      String?
}

model Loan {
  id           String    @id @default(cuid())
  guardId      String
  guard        User      @relation(fields: [guardId], references: [id])
  guardName    String
  amount       Float
  reason       String
  interestRate Float
  totalOwed    Float
  balance      Float
  status       String
  requestedAt  DateTime  @default(now())
  approvedAt   DateTime?
  payments     String
}

model Comunicado {
  id         String   @id @default(cuid())
  subject    String
  message    String
  target     String
  targetName String
  channels   String?
  createdAt  DateTime @default(now())
}

model WorkOrder {
  id           String     @id @default(cuid())
  title        String
  description  String
  peticionId   String?
  peticion     Peticion?  @relation(fields: [peticionId], references: [id])
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  address      String
  status       String
  assignedTo   String?
  assignee     User?      @relation(fields: [assignedTo], references: [id])
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  cost         Float?
}

model Survey {
  id           String     @id @default(cuid())
  title        String
  description  String?
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id], onDelete: Cascade)
  options      String
  createdAt    DateTime   @default(now())
  closesAt     DateTime
  status       String
  voters       User[]
}

model List {
  key    String   @id
  values String[]
}

model ChatMessage {
  id         String   @id @default(cuid())
  authorId   String
  authorName String
  text       String
  createdAt  DateTime @default(now())
  // Relation
  author     User     @relation(fields: [authorId], references: [id])
}

model DirectMessage {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  authorId       String
  author         User         @relation("SentMessages", fields: [authorId], references: [id])
  recipientId    String
  recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  text           String
  createdAt      DateTime     @default(now())
}

model Conversation {
  id               String          @id @default(cuid())
  participantIds   String?
  participantNames String?
  messages         DirectMessage[]
  lastMessageAt    DateTime        @default(now())
  participants     User[]
}

model ArchivedPayroll {
  id          String   @id @default(cuid())
  period      String
  payrollData String
  totals      String
  archivedAt  DateTime @default(now())
}

model HandoverNote {
  id           String   @id @default(cuid())
  condominioId String
  authorId     String
  authorName   String
  notes        String
  createdAt    DateTime @default(now())
}

model AlertResponse {
  id                  String   @id @default(cuid())
  guardId             String
  guard               User     @relation(fields: [guardId], references: [id])
  guardName           String
  condominioId        String
  createdAt           DateTime @default(now())
  responseTimeSeconds Int
  selfiePhotoUrl      String
  environmentPhotoUrl String
  comment             String
}

model PanicAlert {
  id           String     @id @default(cuid())
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  guardId      String
  guardName    String
  createdAt    DateTime   @default(now())
}

model CommunityEvent {
  id           String     @id @default(cuid())
  title        String
  description  String?
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  start        DateTime
  end          DateTime
  isAllDay     Boolean
  location     String?
  creatorId    String
  creator      User       @relation(fields: [creatorId], references: [id])
}

model Asset {
  id                  String     @id @default(cuid())
  name                String
  category            String
  location            String
  condominioId        String
  condominio          Condominio @relation(fields: [condominioId], references: [id])
  purchaseDate        DateTime?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  status              String
}

model Reservation {
  id           String     @id @default(cuid())
  areaId       String
  area         CommonArea @relation(fields: [areaId], references: [id])
  areaName     String
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  userName     String
  date         String
  startTime    String
  endTime      String
  status       String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  createdAt    DateTime   @default(now())
}

model CommonArea {
  id           String        @id @default(cuid())
  name         String
  description  String
  capacity     Int
  condominioId String
  condominio   Condominio    @relation(fields: [condominioId], references: [id])
  imageUrl     String?
  rules        String?
  cost         Float?
  openingTime  String?
  closingTime  String?
  reservations Reservation[]
}

model VisitorNotification {
  id           String     @id @default(cuid())
  who          String
  visitorType  String
  subject      String
  residentId   String
  resident     User       @relation(fields: [residentId], references: [id])
  residentName String
  addressId    String
  address      Address    @relation(fields: [addressId], references: [id])
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  createdAt    DateTime   @default(now())
  status       String
}

model Transaction {
  id         String   @id @default(cuid())
  residentId String
  date       DateTime
  type       String
  concept    String
  amount     Float
}
