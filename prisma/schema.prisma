pg_dump \
     -Fc \
          -v \
               -d __export DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19Pc19hSExoZkMxODhXbVpBcWFjS0IiLCJhcGlfa2V5IjoiMDFLMTVYM0VNRTg3RUVDOVhLN1MyN1ozS1AiLCJ0ZW5hbnRfaWQiOiI4Y2UwNzZlYmQzNTU5ZTVmMDViNWFkODZkZDQxYjE0YzZjYzU0ODU1NzZkODk2OWFkNTliZjkxMTU4ODgzN2YwIiwiaW50ZXJuYWxfc2VjcmV0IjoiMTk4OTEyZDMtZGI3Yy00ZDc0LWI3YTEtOGRlMjAxY2MzZDA1In0.U9u5mt_vkQsKzpc0fQtFYtgNCziq_SJTS2_scRi9neI"__ \
                    -n public \
                         -f db_dump.bak
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String    @id @default(uuid())
  username              String    @unique
  name                  String
  email                 String    @unique
  password              String
  role                  String
  photoUrl              String?
  condominioId          String?
  addressId             String?
  condominioIds         String[]
  addressIds            String[]
  vehicles              VehicleInfo[]
  dailySalary           Float?
  allowRemoteCheckIn    Boolean?  @default(false)
  loanLimit             Float?
  interestRate          Float?
  leaseStartDate        DateTime?
  leaseEndDate          DateTime?
  numberOfInhabitants   Int?
  inhabitantNames       String[]
  requires_password_change Boolean? @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model VehicleInfo {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  alias         String?
  licensePlate  String
  brand         String
  color         String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Condominio {
  id                      String    @id @default(uuid())
  name                    String
  mainAddress             String
  latitude                Float?
  longitude               Float?
  status                  String    @default("Activo")
  guardIds                String[]
  geofenceRadius          Int?
  guardsRequiredDiurno    Int?      @default(1)
  guardsRequiredNocturno  Int?      @default(1)
  guardMenuSections       String[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Address {
  id            String   @id @default(uuid())
  fullAddress   String
  condominioId  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VehicularRegistration {
  id                String    @id @default(uuid())
  licensePlate      String
  fullName          String
  visitorType       String
  providerType      String?
  employeeType      String?
  vehicleType       String
  vehicleBrand      String
  vehicleColor      String
  address           String
  entryTimestamp    DateTime  @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
  vehiclePhotoUrl   String?
}

model PedestrianRegistration {
  id                String    @id @default(uuid())
  fullName          String
  visitorType       String
  address           String
  entryTimestamp    DateTime  @default(now())
  exitTimestamp     DateTime?
  condominioId      String
  condominioName    String
  visitorIdPhotoUrl String?
}

model Peticion {
  id              String             @id @default(uuid())
  title           String
  description     String
  creatorId       String
  creatorName     String
  creatorRole     String
  condominioId    String
  condominioName  String
  status          String
  category        String?
  createdAt       DateTime           @default(now())
  comments        PeticionComment[]
}

model PeticionComment {
  id          String   @id @default(uuid())
  authorId    String
  authorName  String
  text        String
  createdAt   DateTime @default(now())
  peticion    Peticion   @relation(fields: [peticionId], references: [id], onDelete: Cascade)
  peticionId  String
}

model BitacoraEntry {
  id            String   @id @default(uuid())
  condominioId  String
  authorId      String
  authorName    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  type          String
  text          String
  relatedId     String?
  photos        String[]
  category      String?
  latitude      Float?
  longitude     Float?
}

model ShiftRecord {
  id              String    @id @default(uuid())
  guardId         String
  guardName       String
  condominioId    String
  condominioName  String
  turno           String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  equipmentIds    String[]
  handoverNotes   String?
  incident        String?
}

model Package {
  id                    String   @id @default(uuid())
  recipientAddressId    String
  recipientAddress      String
  recipientName         String
  trackingNumber        String?
  courierName           String
  courierCompany        String
  status                String
  receivedAt            DateTime @default(now())
  deliveredAt           DateTime?
  receivedByGuardId     String
  receivedByGuardName   String
  deliveredToName       String?
  condominioId          String
  damageNotes           String?
  deliveryPhotoUrl      String?
  deliverySignatureUrl  String?
}
